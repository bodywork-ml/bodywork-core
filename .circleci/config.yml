# bodywork - MLOps on Kubernetes.
# Copyright (C) 2020-2021  Bodywork Machine Learning Ltd.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.0.3
jobs:
  run-unit-and-functional-tests-and-static-code-analysis:
    docker: 
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Configure Git
          command: | 
            git config --global user.name "Bodywork Machine Learning Ltd"
            git config --global user.email "info@bodyworkml.com"
      - add_ssh_keys:
            fingerprints:
              - "3b:3f:26:dc:81:3b:6d:49:88:8e:da:f0:d5:9f:99:d6"
              - "e2:88:27:a5:93:ed:d6:9f:1a:58:cf:07:a7:75:51:07"  
      - run:
          name: Installing Python dependencies
          command: pip install -r requirements_dev.txt
      - run: 
          name: Running tests
          command: tox -e py38-unit_and_functional_tests,py38-static_code_analysis -- -s -vv --junitxml=~/tox/junit.xml
      - store_test_results:
          path: ~/tox/
      - run:
          name: Code Coverage upload
          command: bash <(curl -s https://codecov.io/bash)
  run-integration-tests:
    executor:
      name: aws-eks/python
      tag: "3.8"
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: bodywork-dev
      - checkout
      - run:
          name: Installing Python dependencies
          command: pip install -r requirements_dev.txt
      - run: 
          name: Running tests
          command: tox -e py38-integration -- -s -vv
      - run:
          name: Code Coverage upload
          command: bash <(curl -s https://codecov.io/bash)
  build-dev-docker-image-push-to-dockerhub:
    machine: true
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "3b:3f:26:dc:81:3b:6d:49:88:8e:da:f0:d5:9f:99:d6"
            - "e2:88:27:a5:93:ed:d6:9f:1a:58:cf:07:a7:75:51:07"  
      - run:
          name: Build image
          command: |
            docker build . -t bodyworkml/bodywork-core:$(cat VERSION)-dev
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker push bodyworkml/bodywork-core
  build-master-docker-image-push-to-dockerhub:
    machine: true
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "3b:3f:26:dc:81:3b:6d:49:88:8e:da:f0:d5:9f:99:d6"
            - "e2:88:27:a5:93:ed:d6:9f:1a:58:cf:07:a7:75:51:07" 
      - run:
          name: Build image
          command: |
            docker build . -t bodyworkml/bodywork-core:$(cat VERSION) -t bodyworkml/bodywork-core:latest
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker push bodyworkml/bodywork-core
  build-python-package-push-to-pypi:
    docker: 
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Installing Python dependencies
          command: pip install -r requirements_dev.txt
      - run:
          name: Building wheel
          command: python setup.py sdist bdist_wheel
      - run:
          name: Push to PyPI
          command: twine upload dist/* -u $PYPI_USERNAME -p $PYPI_PASSWORD --verbose
  create-and-push-new-git-tag:
    docker: 
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Tag Git repo.
          command: git tag v$(cat VERSION)
      - run:
          name: Git push tag.
          command: git push origin v$(cat VERSION)
  ensure-package-version-number-incremented:
    docker: 
      - image: circleci/python:3.8
    steps:
      - checkout
      - run: 
          name: Check that VERSION has been bumped
          command: |
            if [ ${CIRCLE_BRANCH} != "master" ]; then
              git clone --depth 1 --single-branch $CIRCLE_REPOSITORY_URL master-clone
              export VERSION_MASTER=$(cat master-clone/VERSION)
              export VERSION_BRANCH=$(cat VERSION)
              if [ $VERSION_BRANCH == $VERSION_MASTER ]; then
                echo "Version on branch '${CIRCLE_BRANCH}' (v${VERSION_BRANCH}) is the same as on 'master' - please bump version in VERSION file."
                exit 1
              else
                echo "Branch '${CIRCLE_BRANCH}' (v${VERSION_BRANCH}) has passed all tests and can be merged."
              fi
            else
              echo "Merging into master branch."
            fi

workflows:
  version: 2
  test-build-deploy:
    jobs:
      - ensure-package-version-number-incremented
      - run-unit-and-functional-tests-and-static-code-analysis:
          requires:
            - ensure-package-version-number-incremented
          filters:
            branches:
              ignore: master
      - build-dev-docker-image-push-to-dockerhub:
          requires:
            - run-unit-and-functional-tests-and-static-code-analysis
          filters:
            branches:
              ignore: master
      - run-k8s-integration-tests:
          requires:
            - build-dev-docker-image-push-to-dockerhub
      - build-master-docker-image-push-to-dockerhub:
          requires:
            - ensure-package-version-number-incremented
          filters:
            branches:
              only: master
      - build-python-package-push-to-pypi:
          requires:
            - build-master-docker-image-push-to-dockerhub
          filters:
            branches:
              only: master
      - create-and-push-new-git-tag:
          requires:
            - build-python-package-push-to-pypi
          filters:
            branches:
              only: master
